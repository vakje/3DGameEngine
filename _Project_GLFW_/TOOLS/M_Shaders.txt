#shader vertex
#version 330 core

layout(location = 0) in vec3 aPos;  // Vertex position input
layout(location = 1) in vec3 aColor; // Vertex color input (optional, for coloring)

out vec3 vertexColor; // Color to pass to the fragment shader

uniform mat4 model;    // Model transformation matrix
uniform mat4 view;     // View transformation matrix
uniform mat4 projection; // Projection transformation matrix

void main() {
    // Transform the vertex position using the model, view, and projection matrices
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    
    // Pass the color to the fragment shader
    vertexColor = aColor;
}

#shader fragment
#version 330 core

in vec3 vertexColor;  // Color passed from the vertex shader

out vec4 FragColor;   // Final color output

void main() {
    // Set the fragment color (output color)
    FragColor = vec4(vertexColor, 1.0);  // RGB color with alpha set to 1.0 (opaque)
}